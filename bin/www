#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('drawphone:server');
var http = require('http');
var https = require('https');
var fs = require('fs');

/**
 * Use certificates if provided
 */

var privateKeyPath = ("bin/server.key");
var certificatePath = ("bin/server.crt");
var hasPrivateKey = fs.existsSync(privateKeyPath);
var hasCertificate = fs.existsSync(certificatePath);
var httpsCertificatesExist = hasPrivateKey && hasCertificate;


/**
 * Get port from the environment variables and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create server. Use HTTPS if possible
 */

var server;
if (httpsCertificatesExist){
	// HTTPS
	console.warn("Creating HTTPS server.");
	var privateKey = fs.readFileSync(privateKeyPath);
	var certificate = fs.readFileSync(certificatePath);
	var credentials = {key: privateKey, cert: certificate};
	server = https.createServer(credentials);
} else {
	// HTTP
	console.warn("Private key or certificate not found. Using HTTP instead.");
	console.info("Creating HTTP server.");
	server = http.createServer(app);
} 

/**
 * Attach Socket.IO to the Express server.
 */

var io = app.io;
io.attach(server, {
	pingInterval: 15000,
	pingTimeout: 30000
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
console.log('Drawphone is now running on port ' + port + '. Press Ctrl+C to stop.');
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string' ?
		'Pipe ' + port :
		'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
	case 'EACCES':
		console.error(bind + ' requires elevated privileges');
		process.exit(1);
		break;
	case 'EADDRINUSE':
		console.error(bind + ' is already in use');
		process.exit(1);
		break;
	default:
		throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string' ?
		'pipe ' + addr :
		'port ' + addr.port;
	debug('Listening on ' + bind);
}
